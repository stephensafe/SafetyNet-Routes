<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SafetyNet Encrypted Room</title>
  <link rel="stylesheet" href="style.css" />

  <!-- Firebase SDKs (we’ll set up config next) -->
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
</head>
<body>
  <header>
    <img id="logo" src="assets/safetynet-logo.jpeg" alt="SafetyNet Logo" />
  </header>

  <main>
    <div class="chat-container">
      <div id="roomTimer" class="room-timer">Room expires in: --:--</div>
      <div id="messages" class="messages"></div>

      <div class="input-area">
        <input type="text" id="messageInput" placeholder="Type your message..." autocomplete="off" />
        <button onclick="sendMessage()">Send</button>
      </div>
    </div>
  </main>

  <script>
    // === 🧠 Firebase Config Placeholder ===
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
      databaseURL: "https://YOUR_PROJECT_ID.firebaseio.com",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_PROJECT_ID.appspot.com",
      messagingSenderId: "YOUR_SENDER_ID",
      appId: "YOUR_APP_ID"
    };

    // === ⚙️ Initialize Firebase ===
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    // === 🔐 Room and User Info ===
    const urlParams = new URLSearchParams(window.location.search);
    const roomId = urlParams.get('room') || 'default-room';
    const userId = 'user-' + Math.floor(Math.random() * 100000);
    const roomRef = db.ref(`rooms/${roomId}`);
    const messagesRef = roomRef.child('messages');
    const EXPIRE_MS = 30 * 60 * 1000; // 30 minutes

    let roomTimerInterval;

    function startRoomTimer(createdAt) {
      const roomTimerEl = document.getElementById('roomTimer');

      roomTimerInterval = setInterval(() => {
        const now = Date.now();
        const diff = EXPIRE_MS - (now - createdAt);

        if (diff <= 0) {
          clearInterval(roomTimerInterval);
          expireRoom();
          return;
        }

        const mins = Math.floor(diff / 60000);
        const secs = Math.floor((diff % 60000) / 1000);
        roomTimerEl.textContent = `Room expires in: ${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
      }, 1000);
    }

    function expireRoom() {
      document.getElementById('roomTimer').textContent = "⏳ This room has expired";
      document.getElementById('messageInput').disabled = true;
      document.querySelector('.input-area button').disabled = true;
      messagesRef.off(); // Stop receiving messages

      // Optionally delete room from Firebase
      db.ref(`rooms/${roomId}`).remove();
    }

    function displayMessage(messageText, messageId, isOwnMessage = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = isOwnMessage ? 'message own' : 'message';
      messageDiv.id = `msg-${messageId}`;
      messageDiv.textContent = messageText;
      document.getElementById('messages').appendChild(messageDiv);
      scrollToBottom();

      // 🔥 Remove after 30 seconds
      setTimeout(() => {
        const msg = document.getElementById(`msg-${messageId}`);
        if (msg) {
          msg.remove();
          messagesRef.child(messageId).remove();
        }
      }, 30000);
    }

    function sendMessage() {
      const messageInput = document.getElementById('messageInput');
      const messageText = messageInput.value.trim();
      if (messageText === '') return;

      const messageId = messagesRef.push().key;
      const messageData = {
        text: messageText,
        timestamp: Date.now(),
        sender: userId
      };

      messagesRef.child(messageId).set(messageData);
      displayMessage(messageText, messageId, true);
      messageInput.value = '';
    }

    function scrollToBottom() {
      const messagesDiv = document.getElementById('messages');
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // === 🕒 Room Init & Listener ===
    roomRef.once('value').then(snapshot => {
      const data = snapshot.val();

      if (!data || !data.createdAt) {
        const createdAt = Date.now();
        roomRef.set({ createdAt }); // new room
        startRoomTimer(createdAt);
      } else {
        startRoomTimer(data.createdAt);
      }

      // 👂 Listen for new messages
      messagesRef.on('child_added', (snapshot) => {
        const message = snapshot.val();
        const messageId = snapshot.key;
        if (message.sender !== userId) {
          displayMessage(message.text, messageId, false);
        }
      });
    });
  </script>
</body>
</html>
